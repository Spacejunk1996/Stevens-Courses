{
  "_args": [
    [
      {
        "raw": "prompt-sync@^4.1.5",
        "scope": null,
        "escapedName": "prompt-sync",
        "name": "prompt-sync",
        "rawSpec": "^4.1.5",
        "spec": ">=4.1.5 <5.0.0",
        "type": "range"
      },
      "/Users/huangzijing/Desktop/2nd Semester in SIT/CS570/labs/assignment5"
    ]
  ],
  "_from": "prompt-sync@>=4.1.5 <5.0.0",
  "_id": "prompt-sync@4.1.5",
  "_inCache": true,
  "_location": "/prompt-sync",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/prompt-sync-4.1.5.tgz_1493909059703_0.9066443531773984"
  },
  "_npmUser": {
    "name": "davidmarkclements",
    "email": "huperekchuno@googlemail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "prompt-sync@^4.1.5",
    "scope": null,
    "escapedName": "prompt-sync",
    "name": "prompt-sync",
    "rawSpec": "^4.1.5",
    "spec": ">=4.1.5 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/prompt-sync/-/prompt-sync-4.1.5.tgz",
  "_shasum": "709ac182388b0e9a4a45b5683ed0449ed19f3eb8",
  "_shrinkwrap": null,
  "_spec": "prompt-sync@^4.1.5",
  "_where": "/Users/huangzijing/Desktop/2nd Semester in SIT/CS570/labs/assignment5",
  "bugs": {
    "url": "https://github.com/0x00A/prompt-sync/issues"
  },
  "contributors": [
    {
      "name": "Paolo Fragomeni",
      "email": "paolo@async.ly"
    },
    {
      "name": "David Mark Clements",
      "email": "david.clements@nearform.com"
    }
  ],
  "dependencies": {},
  "description": "a synchronous prompt for node.js",
  "devDependencies": {
    "prompt-sync-history": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "709ac182388b0e9a4a45b5683ed0449ed19f3eb8",
    "tarball": "https://registry.npmjs.org/prompt-sync/-/prompt-sync-4.1.5.tgz"
  },
  "gitHead": "bc7e5882782129b7e8c7afc3964807e7bc774f3b",
  "homepage": "https://github.com/0x00A/prompt-sync#readme",
  "keywords": [
    "prompt",
    "sync",
    "blocking",
    "readline",
    "input",
    "getline",
    "repl",
    "history"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "davidmarkclements",
      "email": "huperekchuno@googlemail.com"
    },
    {
      "name": "hij1nx",
      "email": "paolo@async.ly"
    }
  ],
  "name": "prompt-sync",
  "optionalDependencies": {},
  "readme": "# SYNOPSIS\nA sync prompt for node. very simple. no C++ bindings and no bash scripts.\n\nWorks on Linux, OS X and Windows.\n\n# BASIC MODE\n```js\n\nvar prompt = require('prompt-sync')();\n//\n// get input from the user.\n//\nvar n = prompt('How many more times? ');\n```\n# WITH HISTORY\n\nHistory is an optional extra, to use simply install the history plugin. \n\n```sh\nnpm install --save prompt-sync-history\n```\n\n```js\nvar prompt = require('prompt-sync')({\n  history: require('prompt-sync-history')() //open history file\n});\n//get some user input\nvar input = prompt()\nprompt.history.save() //save history back to file\n```\n\nSee the [prompt-sync-history](http://npm.im/prompt-sync-history) module\nfor options, or fork it for customized behaviour. \n\n# API\n\n## `require('prompt-sync')(config) => prompt` \n\nReturns an instance of the `prompt` function.\nTakes `config` option with the following possible properties\n\n`sigint`: Default is `false`. A ^C may be pressed during the input process to abort the text entry. If sigint it `false`, prompt returns `null`. If sigint is `true` the ^C will be handled in the traditional way: as a SIGINT signal causing process to exit with code 130.\n\n`autocomplete`: A completer function that will be called when user enters TAB to allow for autocomplete. It takes a string as an argument an returns an array of strings that are possible matches for completion. An empty array is returned if there are no matches.\n\n`history`: Takes an object that supplies a \"history interface\", see [prompt-sync-history](http://npm.im/prompt-sync-history) for an example.\n\n## `prompt(ask, value, opts)`\n\n`ask` is the label of the prompt, `value` is the default value\nin absence of a response. \n\nThe `opts` argument can also be in the first or second parameter position.\n\nOpts can have the following properties\n\n`echo`: Default is `'*'`. If set the password will be masked with the specified character. For hidden input, set echo to `''` (or use `prompt.hide`).\n\n`autocomplete`: Overrides the instance `autocomplete` function to allow for custom \nautocompletion of a particular prompt.\n\n`value`: Same as the `value` parameter, the default value for the prompt. If `opts`\nis in the third position, this property will *not* overwrite the `value` parameter.\n\n`ask`: Sames as the `value` parameter. The prompt label. If `opts` is not in the first position, the `ask` parameter will *not* be overridden by this property.\n\n## `prompt.hide(ask)`\n\nConvenience method for creating a standard hidden password prompt, \nthis is the same as `prompt(ask, {echo: ''})`\n\n\n# LINE EDITING\nLine editing is enabled in the non-hidden mode. (use up/down arrows for history and backspace and left/right arrows for editing)\n\nHistory is not set when using hidden mode.\n\n# EXAMPLES\n\n```js\n  //basic:\n  console.log(require('prompt-sync')()('tell me something about yourself: '))\n\n  var prompt = require('prompt-sync')({\n    history: require('prompt-sync-history')(),\n    autocomplete: complete(['hello1234', 'he', 'hello', 'hello12', 'hello123456']),\n    sigint: false\n  });\n\n  var value = 'frank';\n  var name = prompt('enter name: ', value);\n  console.log('enter echo * password');\n  var pw = prompt({echo: '*'});\n  var pwb = prompt('enter hidden password (or don\\'t): ', {echo: '', value: '*pwb default*'})\n  var pwc = prompt.hide('enter another hidden password: ')\n  var autocompleteTest = prompt('custom autocomplete: ', {\n    autocomplete: complete(['bye1234', 'by', 'bye12', 'bye123456'])\n  });\n\n  prompt.history.save();\n\n  console.log('\\nName: %s\\nPassword *: %s\\nHidden password: %s\\nAnother Hidden password: %s', name, pw, pwb, pwc);\n  console.log('autocomplete2: ', autocompleteTest);\n\n  function complete(commands) {\n    return function (str) {\n      var i;\n      var ret = [];\n      for (i=0; i< commands.length; i++) {\n        if (commands[i].indexOf(str) == 0)\n          ret.push(commands[i]);\n      }\n      return ret;\n    };\n  };\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/0x00A/prompt-sync.git"
  },
  "scripts": {
    "test": "node test"
  },
  "version": "4.1.5"
}
